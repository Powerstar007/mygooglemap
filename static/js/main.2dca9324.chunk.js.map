{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Geocode","setApiKey","App","state","address","city","area","zoom","height","mapPosition","lat","lng","markerPosition","onMarkerDragEnd","event","newLat","latLng","newLng","fromLatLng","then","response","results","formatted_address","addressArray","address_components","getCity","getArea","getState","setState","onPlaceSelected","place","geometry","location","MapWithAMarker","withScriptjs","withGoogleMap","props","defaultZoom","defaultCenter","draggable","onDragEnd","position","style","width","paddingLeft","marginTop","marginBottom","types","padding","margin","maxwidth","bordered","Item","label","this","googleMapURL","loadingElement","containerElement","mapElement","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAAe,I,iECcfA,IAAQC,UAAU,2C,IA+HHC,E,4MA3HbC,MAAO,CACLC,QAAQ,GACRC,KAAK,GACLC,KAAK,GACLH,MAAM,GACNI,KAAK,GACLC,OAAO,IACPC,YAAY,CACVC,IAAI,EACJC,IAAI,GAENC,eAAe,CACbF,IAAI,EACJC,IAAI,I,EAMRE,gBAAiB,SAACC,GAChB,IAAIC,EAASD,EAAME,OAAON,MACtBO,EAASH,EAAME,OAAOL,MAC1BX,IAAQkB,WAAWH,EAAQE,GAC1BE,MAAK,SAAAC,GAEJ,IAAMhB,EAAUgB,EAASC,QAAQ,GAAGC,kBACpCC,EAAeH,EAASC,QAAQ,GAAGG,mBACnCnB,EAAO,EAAKoB,QAAQF,GACpBjB,EAAO,EAAKoB,QAAQH,GACpBpB,EAAQ,EAAKwB,SAASJ,GACtB,EAAKK,SAAS,CACZxB,QAASA,GAAqB,GAC9BE,KAAOA,GAAa,GACpBD,KAAOA,GAAa,GACpBF,MAAOA,GAAe,GACtBS,eAAgB,CACdF,IAAIK,EACJJ,IAAIM,GAENR,YAAa,CACXC,IAAIK,EACJJ,IAAIM,S,EAKZY,gBAAkB,SAACC,GACjB,IAAM1B,EAAU0B,EAAMR,kBACtBC,EAAeO,EAAMN,mBACrBnB,EAAO,EAAKoB,QAAQF,GACpBjB,EAAO,EAAKoB,QAAQH,GACpBpB,EAAQ,EAAKwB,SAASJ,GACtBR,EAASe,EAAMC,SAASC,SAAStB,MACjCO,EAASa,EAAMC,SAASC,SAASrB,MACjC,EAAKiB,SAAS,CACZxB,QAASA,GAAqB,GAC9BE,KAAOA,GAAa,GACpBD,KAAOA,GAAa,GACpBF,MAAOA,GAAe,GACtBS,eAAgB,CACdF,IAAIK,EACJJ,IAAIM,GAENR,YAAa,CACXC,IAAIK,EACJJ,IAAIM,M,4CAKV,WAAS,IAAD,OAEAgB,EAAiBC,uBAAaC,yBAAc,SAAAC,GAAK,OACrD,eAAC,YAAD,CACEC,YAAa,EACbC,cAAe,CAAE5B,IAAI,EAAKP,MAAMM,YAAYC,IAAKC,IAAK,EAAKR,MAAMM,YAAYE,KAF/E,UAIE,cAAC,SAAD,CACA4B,WAAW,EACZC,UAAW,EAAK3B,gBACb4B,SAAU,CAAC/B,IAAI,EAAKP,MAAMS,eAAeF,IAAKC,IAAK,EAAKR,MAAMS,eAAeD,KAH/E,SAKE,cAAC,aAAD,UACE,4CAMH,cAAC,IAAD,CACC+B,MAAO,CAACC,MAAM,OAAQnC,OAAO,OAAQoC,YAAY,GAAGC,UAAU,EAAEC,aAAa,QAC7EC,MAAO,CAAC,aACRlB,gBAAiB,EAAKA,yBAM9B,OAEC,sBAAKa,MAAO,CAACM,QAAQ,OAAOC,OAAO,SAASC,SAAS,KAArD,UACC,kDACD,eAAC,IAAD,CAAcC,UAAQ,EAAtB,UACC,cAAC,IAAaC,KAAd,CAAmBC,MAAM,OAAzB,SAAiCC,KAAKnD,MAAME,OAC5C,cAAC,IAAa+C,KAAd,CAAmBC,MAAM,OAAzB,SAAiCC,KAAKnD,MAAMG,OAC5C,cAAC,IAAa8C,KAAd,CAAmBC,MAAM,QAAzB,SAAkCC,KAAKnD,MAAMA,QAC7C,cAAC,IAAaiD,KAAd,CAAmBC,MAAM,UAAzB,SAAoCC,KAAKnD,MAAMC,aAK/C,cAAC6B,EAAD,CACAsB,aAAa,gIACbC,eAAgB,qBAAKd,MAAO,CAAElC,OAAO,UACrCiD,iBAAkB,qBAAKf,MAAO,CAAElC,OAAO,WACvCkD,WAAY,qBAAKhB,MAAO,CAAElC,OAAO,mB,GArHnBmD,IAAMC,WCJTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2dca9324.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  InfoWindow,\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport { Descriptions } from 'antd';\nimport AutoComplete from 'react-google-autocomplete';\n\nGeocode.setApiKey(\"AIzaSyCJFzcr6aLrmc4IY0kjWHiFaI7l0M4gF3w\")\n\nclass App extends React.Component {\n\n  state ={\n    address:\"\",\n    city:\"\",\n    area:\"\",\n    state:\"\",\n    zoom:15,\n    height:400,\n    mapPosition:{\n      lat:0,\n      lng:0,\n    },\n    markerPosition:{\n      lat:0,\n      lng:0,\n    }\n  }\n\n\n\n  onMarkerDragEnd =(event) =>{\n    let newLat = event.latLng.lat();\n    let newLng = event.latLng.lng();\n    Geocode.fromLatLng(newLat, newLng)\n    .then(response => {\n      \n      const address = response.results[0].formatted_address,\n      addressArray = response.results[0].address_components,\n      city = this.getCity(addressArray),\n      area = this.getArea(addressArray),\n      state = this.getState(addressArray)\n      this.setState({\n        address:(address) ? address : \"\",\n        area :(area) ? area:\"\",\n        city :(city) ? city:\"\",\n        state:(state) ? state:\"\",\n        markerPosition :{\n          lat:newLat,\n          lng:newLng,\n        },\n        mapPosition :{\n          lat:newLat,\n          lng:newLng,\n        },\n      })\n    })\n  }\n  onPlaceSelected = (place) => {\n    const address = place.formatted_address,\n    addressArray = place.address_components,\n    city = this.getCity(addressArray),\n    area = this.getArea(addressArray),\n    state = this.getState(addressArray),\n    newLat = place.geometry.location.lat(),\n    newLng = place.geometry.location.lng()\n    this.setState({\n      address:(address) ? address : \"\",\n      area :(area) ? area:\"\",\n      city :(city) ? city:\"\",\n      state:(state) ? state:\"\",\n      markerPosition :{\n        lat:newLat,\n        lng:newLng,\n      },\n      mapPosition :{\n        lat:newLat,\n        lng:newLng,\n      },\n    })\n  }\n\n  render(){\n\n    const MapWithAMarker = withScriptjs(withGoogleMap(props =>\n      <GoogleMap\n        defaultZoom={8}\n        defaultCenter={{ lat:this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n      >\n        <Marker\n        draggable={true}\n       onDragEnd={this.onMarkerDragEnd}\n          position={{lat:this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n        >\n          <InfoWindow>\n            <div>\n              hello\n            </div>\n          </InfoWindow>\n          </Marker>\n\n         <AutoComplete\n          style={{width:'100%', height:'40px', paddingLeft:16,marginTop:2,marginBottom:'2rem'}}\n          types={['(regions)']}\n          onPlaceSelected={this.onPlaceSelected}\n         \n         />\n      </GoogleMap>\n    ));\n\n  return (\n\n   <div style={{padding:'1rem',margin:'0 auto',maxwidth:100}}>\n    <h1>Google Map Basic</h1>\n   <Descriptions bordered>\n    <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\n    <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\n    <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\n    <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\n  </Descriptions>\n\n\n      \n    <MapWithAMarker\n    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCJFzcr6aLrmc4IY0kjWHiFaI7l0M4gF3w&v=3.exp&libraries=geometry,drawing,places\"\n    loadingElement={<div style={{ height: `100%` }} />}\n    containerElement={<div style={{ height: `400px` }} />}\n    mapElement={<div style={{ height: `100%` }} />}\n  />\n  </div>\n    \n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}